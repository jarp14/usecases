diff --git org.chico.usecases.diagram/src/usecases/diagram/part/UsecasesDiagramEditor.java org.chico.usecases.diagram/src/usecases/diagram/part/UsecasesDiagramEditor.java
index f4c32c5..266a093 100644
--- org.chico.usecases.diagram/src/usecases/diagram/part/UsecasesDiagramEditor.java
+++ org.chico.usecases.diagram/src/usecases/diagram/part/UsecasesDiagramEditor.java
@@ -3,13 +3,18 @@
 */
 package usecases.diagram.part;
 
+import java.io.File;
+import java.io.FileWriter;
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Vector;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IMarker;
+import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspaceRoot;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
@@ -18,18 +23,27 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.draw2d.FigureCanvas;
+import org.eclipse.draw2d.IFigure;
+import org.eclipse.draw2d.ImageFigure;
+import org.eclipse.draw2d.geometry.Rectangle;
 import org.eclipse.emf.common.ui.URIEditorInput;
+import org.eclipse.emf.common.util.EList;
 import org.eclipse.emf.common.util.URI;
 import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.ecore.util.EcoreUtil;
 import org.eclipse.emf.edit.ui.dnd.LocalTransfer;
 import org.eclipse.emf.transaction.TransactionalEditingDomain;
 import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
 import org.eclipse.gef.EditPartViewer;
 import org.eclipse.gef.palette.PaletteRoot;
+import org.eclipse.gef.ui.palette.FlyoutPaletteComposite;
+import org.eclipse.gef.ui.rulers.RulerComposite;
 import org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService;
 import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;
 import org.eclipse.gmf.runtime.diagram.ui.actions.ActionIds;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;
 import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;
 import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;
@@ -41,6 +55,7 @@
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.jface.dialogs.IMessageProvider;
 import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.util.LocalSelectionTransfer;
 import org.eclipse.jface.viewers.ISelection;
 import org.eclipse.jface.viewers.IStructuredSelection;
@@ -49,6 +64,10 @@
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.dnd.Transfer;
 import org.eclipse.swt.dnd.TransferData;
+import org.eclipse.swt.events.MouseEvent;
+import org.eclipse.swt.events.MouseMoveListener;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IEditorMatchingStrategy;
@@ -61,13 +80,18 @@
 import org.eclipse.ui.part.FileEditorInput;
 import org.eclipse.ui.part.IShowInTargetList;
 import org.eclipse.ui.part.ShowInContext;
+import org.eclipse.ui.plugin.AbstractUIPlugin;
 
 import usecases.diagram.navigator.UsecasesNavigatorItem;
+import spaceclipse.collab.CUtilities;
+import spaceclipse.collab.interfaces.ICollaborativeEditor;
+import spaceclipse.herramientas.UsuarioPanel;
+import spaceclipse.space.SpacEclipse;
 
 /**
  * @generated
  */
-public class UsecasesDiagramEditor extends DiagramDocumentEditor implements IGotoMarker {
+public class UsecasesDiagramEditor extends DiagramDocumentEditor implements ICollaborativeEditor, IGotoMarker {
 
 	/**
 	* @generated
@@ -89,6 +113,8 @@
 	*/
 	public UsecasesDiagramEditor() {
 		super(true);
+		
+		CUtilities.setEditor(this);
 	}
 
 	/**
@@ -297,6 +323,19 @@
 				getDiagramGraphicalViewer());
 		getDiagramGraphicalViewer().setContextMenu(provider);
 		getSite().registerContextMenu(ActionIds.DIAGRAM_EDITOR_CONTEXT_MENU, provider, getDiagramGraphicalViewer());
+		
+		// Listener para capturar la ejecuciÃ³n de comandos
+		org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack stack = (org.eclipse.gmf.runtime.diagram.ui.parts.DiagramCommandStack)getCommandStack();
+		stack.addCommandStackListener(new org.eclipse.gef.commands.CommandStackListener() {
+			public void commandStackChanged(java.util.EventObject event) {
+				// Se lleva la cuenta para no replicar cuando no sea necesario
+				cuentaGrabado++;
+				if (cuentaGrabado >= 3){
+					cuentaGrabado = 0;
+					doSave(new org.eclipse.core.runtime.NullProgressMonitor());			
+				}
+			}
+		});
 	}
 
 	/**
@@ -407,4 +446,192 @@
 
 	}
 
+	//@Override
+	public void doSave(org.eclipse.core.runtime.IProgressMonitor progressMonitor) {
+		super.doSave(progressMonitor);			
+
+		org.eclipse.emf.ecore.resource.Resource res = this.getDiagram().eResource();	    		
+		org.eclipse.core.resources.IFile iFile = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(res);
+		String archivoDiagramaOrigen = iFile.getLocation().toString();
+		//Es el mismo nombre quitando "_diagram"
+		String archivoModeloOrigen = archivoDiagramaOrigen.substring(0, archivoDiagramaOrigen.length()-8);
+
+		try {
+			java.io.File fileModelo = new java.io.File(archivoModeloOrigen);
+			java.io.FileReader reader = new java.io.FileReader(fileModelo);
+			char[] bufferModelo = new char[(int)fileModelo.length()];
+			reader.read(bufferModelo);
+			reader.close();
+
+			java.io.File fileDiagrama = new java.io.File(archivoDiagramaOrigen);
+			reader = new java.io.FileReader(fileDiagrama);
+			char[] bufferDiagrama = new char[(int)fileDiagrama.length()];
+			reader.read(bufferDiagrama);
+			reader.close();    		
+
+			((SpacEclipse) CUtilities.getAplicacion()).notificarModelo(bufferModelo, bufferDiagrama, "", "");
+		} catch(java.lang.Exception e) {
+			System.err.println("Error al replicar el modelo");
+			e.printStackTrace();
+		}	
+	}
+
+	@Override
+	public void habilitar() {
+		habilitado = true;
+		myParent.setEnabled(true);
+
+	}
+
+	@Override
+	public void deshabilitar() {
+		habilitado = false;
+		myParent.setEnabled(false);
+	}
+
+	protected boolean habilitado = true;
+	protected Composite myParent;
+	//Cuenta para no replicar cuando no sea necesario
+	private int cuentaGrabado = 0;
+
+	// Coordenadas del ultimo telepuntero que se envio
+	private int miX = 99999;
+	private int miY = 99999;
+
+	// Tabla de telepunteros
+	private Hashtable<String, ImageFigure> telepunteros = new Hashtable<String, ImageFigure>();
+
+	@Override
+	public void copiaModelo(char[] archivoModelo, char[] archivoDiagrama, String rutaArchivoModelo, String rutaArchivoDiagrama) {
+
+		// Primero se habilita si estaba deshabilitado
+		boolean antesHabilitado = true;
+		if (!habilitado) {
+			habilitar();
+			antesHabilitado = false;
+		}
+
+		Resource resource = this.getDiagram().eResource();
+		IFile iFile = WorkspaceSynchronizer.getFile(resource);
+		String archivoDiagramaDestino = iFile.getLocation().toString();
+		// Es el mismo nombre quitando "_diagram"
+		String archivoModeloDestino = archivoDiagramaDestino.substring(0, archivoDiagramaDestino.length()-8);
+
+		try {
+			FileWriter writer = new FileWriter(new File(archivoModeloDestino));
+			writer.write(archivoModelo);
+			writer.close();
+
+			writer = new FileWriter(new File(archivoDiagramaDestino));
+			writer.write(archivoDiagrama);
+			writer.close();
+
+			IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
+			root.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
+
+			EList list = this.getEditingDomain().getResourceSet().getResources();
+			for (int i = 0; i < list.size(); i++) {
+				Resource res = (Resource) list.get(i);
+				res.load(this.getEditingDomain().getResourceSet().getLoadOptions());
+			}
+
+			this.getDocumentProvider().synchronize(this.getEditorInput());
+
+			EObject rootPkg = this.getDiagram().getElement();
+			List editPolicies = CanonicalEditPolicy.getRegisteredEditPolicies(rootPkg);
+			for (Iterator it = editPolicies.iterator(); it.hasNext();) {
+				CanonicalEditPolicy nextEditPolicy = (CanonicalEditPolicy) it.next();
+				nextEditPolicy.refresh();
+			}
+		} catch (Exception e) {
+			System.err.println("Error al copiar el modelo");
+			e.printStackTrace();
+		} finally {
+			// Al final se deshabilita si antes lo estaba
+			if (!antesHabilitado) {
+				deshabilitar();
+			}
+		}		
+	}
+
+	public void createPartControl(Composite parent) {
+		super.createPartControl(parent);
+		myParent = parent;
+		// Se crea el listener de los telepunteros
+		final FigureCanvas canvas = getCanvas();
+		canvas.addMouseMoveListener(new MouseMoveListener() {
+			@Override
+			public void mouseMove(MouseEvent e) {
+				// Primero se comprueba que la diferencia con el anterior envio es > 5
+				if (Math.abs(e.x-miX) > 5 || Math.abs(e.y-miY) > 5) {
+					miX = e.x;
+					miY = e.y;
+
+					SpacEclipse app = (SpacEclipse) CUtilities.getAplicacion();
+
+					// Hay que pasar a coordenadas absolutas, porque los
+						// demas puede que esten viendo una porcion distinta del diagrama
+					Rectangle abs = new Rectangle(e.x, e.y, 0, 0);
+					//canvas.getContents().translateToRelative(abs);
+
+					app.notificarTelepuntero(abs.x, abs.y);
+				}
+			}
+		});
+
+		// Deshabilitado por defecto
+		deshabilitar();
+	}
+
+	@Override
+	public void mueveTelepuntero(String usuario, int x, int y) {
+		final FigureCanvas canvas = getCanvas();
+		//FigureCanvas canvas = getCanvas();
+		IFigure contents = canvas.getContents();
+		ImageFigure figura = telepunteros.get(usuario);
+		// En teoria nunca debera ser null
+		Rectangle rect = new Rectangle(x, y, 12, 20);
+		figura.setBounds(rect);
+		if (!contents.getChildren().contains(figura)) {
+			contents.add(figura);
+		}
+	}
+
+	@Override
+	public void actualizaTelepunteros(Vector<UsuarioPanel> listaUsuarios) {
+		UsuarioPanel usuario = null;
+		ImageFigure figura = null;
+		// Se crea una tabla nueva para ir pasando aqui los existentes y meter los nuevos.
+		// Asi, los viejos no se copiaran. Al final, la nueva sustituye a la vieja.
+		Hashtable<String, ImageFigure> telepunterosNuevos = new Hashtable<String, ImageFigure>();
+		for (int i = 0; i < listaUsuarios.size(); i++) {
+			usuario = (UsuarioPanel) listaUsuarios.elementAt(i);
+			figura = telepunteros.get(usuario.getNombre());
+			if (figura == null) {
+				// Telepuntero nuevo
+				int color = usuario.getColor()+1;
+				String ruta = "resources/flecha" +color+ ".png";
+				ImageDescriptor desc = AbstractUIPlugin.imageDescriptorFromPlugin("SPACEclipse", ruta);
+				figura = new ImageFigure(desc.createImage());
+			}
+			telepunterosNuevos.put(usuario.getNombre(), figura);
+		}
+		telepunteros = telepunterosNuevos;
+	}
+
+	// Metodo para obtener el canvas
+	private FigureCanvas getCanvas() {
+		Control[] controles = myParent.getChildren();
+		FlyoutPaletteComposite control = (FlyoutPaletteComposite) controles[0];
+		Control[] hijos = control.getChildren();
+		RulerComposite ruler = (RulerComposite) hijos[2];
+		Control[] hijosRuler = ruler.getChildren();
+		return (FigureCanvas) hijosRuler[0];
+	}
+
+	@Override
+	public void copiaFichero(char[] archivoFichero, String rutaArchivo) {
+		// TODO Auto-generated method stub
+		
+	}
 }
